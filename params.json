{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Laravel4-powerpack","body":"laravel4-powerpack\r\n==================\r\n\r\nBrings back the helper classes from Laravel 3... and all that in a single, convenient package!\r\n\r\n**`laravel4-powerpack`** contains Laravel 4 ports of the following helper classes:\r\n\r\n- [HTML](#html_class)\r\n\r\n- [Form](#form_class)\r\n\r\n- [Str](#str_class)\r\n\r\n# Installation\r\n\r\nOpen up the Laravel 4 `composer.json` file and add the `laravelbook/laravel4-powerpack` package to the `require` section:\r\n\r\n~~~json\r\n{\r\n\t\"require\": {\r\n\t\t\"laravel/framework\": \"4.0.*\",\r\n\t\t...\r\n\t\t\"laravelbook/laravel4-powerpack\": \"dev-master\"\r\n\t}\r\n\t...\r\n}\r\n~~~\r\n\r\nRun the composer `install` or `update` task, which will make composer download requested packages and setup initial environment:\r\n\r\n~~~sh\r\n$ composer update\r\n~~~\r\n\r\nYou'll now have a `composer.json`, `composer.lock` as well as a `vendor` folder which contains:\r\n\r\n\tvendor/autoload.php\r\n\tvendor/composer\r\n\tvendor/laravel\r\n\tvendor/laravelbook/laravel4-powerpack\r\n\t...\r\n\r\nThe folder `vendor/laravelbook/laravel4-powerpack` contain the **Laravel 4 PowerPack** components:\r\n\r\n\tvendor/laravelbook/laravel4-powerpack/src/LaravelBook/Laravel4Powerpack/HTML.php\r\n\tvendor/laravelbook/laravel4-powerpack/src/LaravelBook/Laravel4Powerpack/Form.php\r\n\tvendor/laravelbook/laravel4-powerpack/src/LaravelBook/Laravel4Powerpack/Str.php\r\n\t\r\nBy default, composer will autoload the required classes. If you encounter any error, run the following command to force composer re-generate the autoload file:\r\n\r\n~~~sh\r\n$ composer dump-autoload\r\n~~~\r\n\r\nNext, we need to install the package in your Laravel 4 application. Open up the the `app/config/app.php` file and append the following code to the `providers` array:\r\n\r\n~~~php\r\n\"LaravelBook\\Laravel4Powerpack\\Providers\\PowerpackServiceProvider\",\r\n~~~\r\n\r\nThe `providers` section should look like the following snippet:\r\n\r\n~~~php\r\n'providers' => array(\r\n    ...\r\n    'LaravelBook\\Laravel4Powerpack\\Providers\\PowerpackServiceProvider',\r\n),\r\n~~~\r\n\r\nNext, add the following code to the `aliases` array in the `app/config/app.php` file:\r\n\r\n~~~php\r\n'HTML' => 'LaravelBook\\Laravel4Powerpack\\Facades\\HTMLFacade',\r\n'Form' => 'LaravelBook\\Laravel4Powerpack\\Facades\\FormFacade',\r\n'Str' => 'LaravelBook\\Laravel4Powerpack\\Facades\\StrFacade',\r\n~~~\r\n\r\nThe `aliases` array should now look like the snippet below:\r\n\r\n~~~php\r\n'aliases' => array(\r\n    ...\r\n\t'HTML' => 'LaravelBook\\Laravel4Powerpack\\Facades\\HTMLFacade',\r\n\t'Form' => 'LaravelBook\\Laravel4Powerpack\\Facades\\FormFacade',\r\n\t'Str' => 'LaravelBook\\Laravel4Powerpack\\Facades\\StrFacade',\t\r\n),\r\n~~~\r\n\r\nLaravel 4 Powerpack is now ready to be used in your web application!\r\n\r\nYou can verify the installation by running some simple test code like this:\r\n\r\n~~~php\r\nRoute::get('/', function() {\r\n\techo Form::open( '/' );\r\n\techo HTML::image( 'img/hello.jpg' );\r\n\techo Form::text( Str::upper('hello world!') );\r\n\techo Form::close();\r\n});\r\n~~~\r\n\r\n<a name=\"html_class\"></a>\r\n# Building HTML\r\n\r\n## Content\r\n\r\n- [Entities](#entities)\r\n- [Scripts And Style Sheets](#scripts-and-style-sheets)\r\n- [Links](#links)\r\n- [Links To Named Routes](#links-to-named-routes)\r\n- [Links To Controller Actions](#links-to-controller-actions)\r\n- [Mail-To Links](#mail-to-links)\r\n- [Images](#images)\r\n- [Lists](#lists)\r\n- [Custom Macros](#custom-macros)\r\n\r\n<a name=\"entities\"></a>\r\n## Entities\r\n\r\nWhen displaying user input in your Views, it is important to convert all characters which have significance in HTML to their \"entity\" representation.\r\n\r\nFor example, the < symbol should be converted to its entity representation. Converting HTML characters to their entity representation helps protect your application from cross-site scripting:\r\n\r\n#### Converting a string to its entity representation:\r\n\r\n~~~php\r\necho HTML::entities('<script>alert(\\'hi\\');</script>');\r\n~~~\r\n\r\n<a name=\"scripts-and-style-sheets\"></a>\r\n## Scripts And Style Sheets\r\n\r\n#### Generating a reference to a JavaScript file:\r\n\r\n~~~php\r\necho HTML::script('js/scrollTo.js');\r\n~~~\r\n\r\n#### Generating a reference to a CSS file:\r\n\r\n~~~php\r\necho HTML::style('css/common.css');\r\n~~~\r\n\r\n#### Generating a reference to a CSS file using a given media type:\r\n\r\n~~~php\r\necho HTML::style('css/common.css', array('media' => 'print'));\r\n~~~\r\n\r\n*Further Reading:*\r\n\r\n- *[Managing Assets](/docs/views/assets)*\r\n\r\n<a name=\"links\"></a>\r\n## Links\r\n\r\n#### Generating a link from a URI:\r\n\r\n~~~php\r\necho HTML::link('user/profile', 'User Profile');\r\n~~~\r\n\r\n#### Generating a link that should use HTTPS:\r\n\r\n~~~php\r\necho HTML::secure('user/profile', 'User Profile');\r\n~~~\r\n\r\n#### Generating a link and specifying extra HTML attributes:\r\n\r\n~~~php\r\necho HTML::link('user/profile', 'User Profile', array('id' => 'profile_link'));\r\n~~~\r\n\r\n<a name=\"links-to-named-routes\"></a>\r\n## Links To Named Routes\r\n\r\n#### Generating a link to a named route:\r\n\r\n~~~php\r\necho HTML::route('profile');\r\n~~~\r\n\r\n#### Generating a link to a named route with wildcard values:\r\n\r\n~~~php\r\n$url = HTML::route('profile', 'User Profile', array($username));\r\n~~~\r\n\r\n*Further Reading:*\r\n\r\n- *[Named Routes](/docs/routing#named-routes)*\r\n\r\n<a name=\"links-to-controller-actions\"></a>\r\n## Links To Controller Actions\r\n\r\n#### Generating a link to a controller action:\r\n\r\n~~~php\r\necho HTML::action('home@index');\r\n~~~\r\n\r\n### Generating a link to a controller action with wildcard values:\r\n\r\n~~~php\r\necho HTML::action('user@profile', 'User Profile', array($username));\r\n~~~\r\n\r\n<a name=\"mail-to-links\"></a>\r\n## Mail-To Links\r\n\r\nThe \"mailto\" method on the HTML class obfuscates the given e-mail address so it is not sniffed by bots.\r\n\r\n#### Creating a mail-to link:\r\n\r\n~~~php\r\necho HTML::mailto('example@gmail.com', 'E-Mail Me!');\r\n~~~\r\n\r\n#### Creating a mail-to link using the e-mail address as the link text:\r\n\r\n~~~php\r\necho HTML::mailto('example@gmail.com');\r\n~~~\r\n\r\n<a name=\"images\"></a>\r\n## Images\r\n\r\n#### Generating an HTML image tag:\r\n\r\n~~~php\r\necho HTML::image('img/smile.jpg', $alt_text);\r\n~~~\r\n\r\n#### Generating an HTML image tag with extra HTML attributes:\r\n\r\n~~~php\r\necho HTML::image('img/smile.jpg', $alt_text, array('id' => 'smile'));\r\n~~~\r\n\r\n<a name=\"lists\"></a>\r\n## Lists\r\n\r\n#### Creating lists from an array of items:\r\n\r\n~~~php\r\necho HTML::ol(array('Get Peanut Butter', 'Get Chocolate', 'Feast'));\r\n\r\necho HTML::ul(array('Ubuntu', 'Snow Leopard', 'Windows'));\r\n\r\necho HTML::dl(array('Ubuntu' => 'Canonical', 'Windows' => 'Microsoft'));\r\n~~~\r\n\r\n<a name=\"custom-macros\"></a>\r\n## Custom Macros\r\n\r\nIt's easy to define your own custom HTML class helpers called \"macros\". Here's how it works. First, simply register the macro with a given name and a Closure:\r\n\r\n#### Registering a HTML macro:\r\n\r\n~~~php\r\nHTML::macro('myElement', function()\r\n{\r\n\treturn '<article type=\"awesome\">';\r\n});\r\n~~~\r\n\r\nNow you can call your macro using its name:\r\n\r\n#### Calling a custom HTML macro:\r\n\r\n~~~php\r\necho HTML::myElement();\r\n~~~\r\n\r\n---\r\n\r\n<a name=\"form_class\"></a>\r\n# Building Forms\r\n\r\n## Contents\r\n\r\n- [Opening A Form](#opening-a-form)\r\n- [CSRF Protection](#csrf-protection)\r\n- [Labels](#labels)\r\n- [Text, Text Area, Password & Hidden Fields](#text)\r\n- [File Input](#file)\r\n- [Checkboxes and Radio Buttons](#checkboxes-and-radio-buttons)\r\n- [Drop-Down Lists](#drop-down-lists)\r\n- [Buttons](#buttons)\r\n- [Custom Macros](#custom-macros)\r\n\r\n> **Note:** All input data displayed in form elements is filtered through the HTML::entities method.\r\n\r\n<a name=\"opening-a-form\"></a>\r\n## Opening A Form\r\n\r\n#### Opening a form to POST to the current URL:\r\n\r\n~~~php\r\necho Form::open();\r\n~~~\r\n\r\n#### Opening a form using a given URI and request method:\r\n\r\n~~~php\r\necho Form::open('user/profile', 'PUT');\r\n~~~\r\n\r\n#### Opening a Form that POSTS to a HTTPS URL:\r\n\r\n~~~php\r\necho Form::openSecure('user/profile');\r\n~~~\r\n\r\n#### Specifying extra HTML attributes on a form open tag:\r\n\r\n~~~php\r\necho Form::open('user/profile', 'POST', array('class' => 'awesome'));\r\n~~~\r\n\r\n#### Opening a form that accepts file uploads:\r\n\r\n~~~php\r\necho Form::openForFiles('users/profile');\r\n~~~\r\n\r\n#### Opening a form that accepts file uploads and uses HTTPS:\r\n\r\n~~~php\r\necho Form::openSecureForFiles('users/profile');\r\n~~~\r\n\r\n#### Closing a form:\r\n\r\n~~~php\r\necho Form::close();\r\n~~~\r\n\r\n<a name=\"csrf-protection\"></a>\r\n## CSRF Protection\r\n\r\nLaravel provides an easy method of protecting your application from cross-site request forgeries. First, a random token is placed in your user's session. Don't sweat it, this is done automatically. Next, use the token method to generate a hidden form input field containing the random token on your form:\r\n\r\n#### Generating a hidden field containing the session's CSRF token:\r\n\r\n~~~php\r\necho Form::token();\r\n~~~\r\n\r\n#### Attaching the CSRF filter to a route:\r\n\r\n~~~php\r\nRoute::post('profile', array('before' => 'csrf', function()\r\n{\r\n\t//\r\n}));\r\n~~~\r\n\r\n#### Retrieving the CSRF token string:\r\n\r\n~~~php\r\n$token = Session::getToken();\r\n~~~\r\n\r\n> **Note:** You must specify a session driver before using the Laravel CSRF protection facilities.\r\n\r\n*Further Reading:*\r\n\r\n- [Route Filters](/docs/routing#filters)\r\n- [Cross-Site Request Forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\r\n\r\n<a name=\"labels\"></a>\r\n## Labels\r\n\r\n#### Generating a label element:\r\n\r\n~~~php\r\necho Form::label('email', 'E-Mail Address');\r\n~~~\r\n\r\n#### Specifying extra HTML attributes for a label:\r\n\r\n~~~php\r\necho Form::label('email', 'E-Mail Address', array('class' => 'awesome'));\r\n~~~\r\n\r\n> **Note:** After creating a label, any form element you create with a name matching the label name will automatically receive an ID matching the label name as well.\r\n\r\n<a name=\"text\"></a>\r\n## Text, Text Area, Password & Hidden Fields\r\n\r\n#### Generate a text input element:\r\n\r\n~~~php\r\necho Form::text('username');\r\n~~~\r\n\r\n#### Specifying a default value for a text input element:\r\n\r\n~~~php\r\necho Form::text('email', 'example@gmail.com');\r\n~~~\r\n\r\n> **Note:** The *hidden* and *textarea* methods have the same signature as the *text* method. You just learned three methods for the price of one!\r\n\r\n#### Generating a password input element:\r\n\r\n~~~php\r\necho Form::password('password');\r\n~~~\r\n\r\n<a name=\"checkboxes-and-radio-buttons\"></a>\r\n## Checkboxes and Radio Buttons\r\n\r\n#### Generating a checkbox input element:\r\n\r\n~~~php\r\necho Form::checkbox('name', 'value');\r\n~~~\r\n\r\n#### Generating a checkbox that is checked by default:\r\n\r\n~~~php\r\necho Form::checkbox('name', 'value', true);\r\n~~~\r\n\r\n> **Note:** The *radio* method has the same signature as the *checkbox* method. Two for one!\r\n\r\n<a name=\"file\"></a>\r\n## File Input\r\n\r\n#### Generate a file input element:\r\n\r\n~~~php\r\necho Form::file('image');\r\n~~~\r\n\r\n<a name=\"drop-down-lists\"></a>\r\n## Drop-Down Lists\r\n\r\n#### Generating a drop-down list from an array of items:\r\n\r\n~~~php\r\necho Form::select('size', array('L' => 'Large', 'S' => 'Small'));\r\n~~~\r\n\r\n#### Generating a drop-down list with an item selected by default:\r\n\r\n~~~php\r\necho Form::select('size', array('L' => 'Large', 'S' => 'Small'), 'S');\r\n~~~\r\n\r\n<a name=\"buttons\"></a>\r\n## Buttons\r\n\r\n#### Generating a submit button element:\r\n\r\n~~~php\r\necho Form::submit('Click Me!');\r\n~~~\r\n\r\n> **Note:** Need to create a button element? Try the *button* method. It has the same signature as *submit*.\r\n\r\n<a name=\"custom-macros\"></a>\r\n## Custom Macros\r\n\r\nIt's easy to define your own custom Form class helpers called \"macros\". Here's how it works. First, simply register the macro with a given name and a Closure:\r\n\r\n#### Registering a Form macro:\r\n\r\n~~~php\r\nForm::macro('myField', function()\r\n{\r\n\treturn '<input type=\"awesome\">';\r\n});\r\n~~~\r\n\r\nNow you can call your macro using its name:\r\n\r\n#### Calling a custom Form macro:\r\n\r\n~~~php\r\necho Form::myField();\r\n~~~\r\n\r\n---\r\n\r\n\r\n<a name=\"str_class\"></a>\r\n# Working With Strings\r\n\r\n## Contents\r\n\r\n- [Capitalization, Etc.](#capitalization)\r\n- [Word & Character Limiting](#limits)\r\n- [Generating Random Strings](#random)\r\n- [Singular & Plural](#singular-and-plural)\r\n- [Slugs](#slugs)\r\n- [Case Conversion](#case)\r\n- [String Searching](#search)\r\n\r\n<a name=\"capitalization\"></a>\r\n## Capitalization, Etc.\r\n\r\nThe **Str** class provides three convenient methods for manipulating string capitalization: **upper**, **lower**, and **title**. These are more intelligent versions of the PHP [strtoupper](http://php.net/manual/en/function.strtoupper.php), [strtolower](http://php.net/manual/en/function.strtolower.php), and [ucwords](http://php.net/manual/en/function.ucwords.php) methods. More intelligent because they can handle UTF-8 input if the [multi-byte string](http://php.net/manual/en/book.mbstring.php) PHP extension is installed on your web server. To use them, just pass a string to the method:\r\n\r\n~~~php\r\necho Str::lower('I am a string.');\r\n// i am a string.\r\n\r\necho Str::upper('I am a string.');\r\n// I AM A STRING.\r\n\r\necho Str::title('I am a string.');\r\n// I Am A String.\r\n~~~\r\n\r\n**Additional methods:**\r\n\r\n`length( $string )`: Get the length of a string.\r\n\r\n~~~php\r\n// Get the length of a string\r\n$length = Str::length('Taylor Otwell');\r\n\r\n// Get the length of a multi-byte string\r\n$length = Str::length('Τάχιστη')\r\n~~~\r\n\r\n`upperWords( $string ):` Convert first letter of each word to uppercase.\r\n\r\n<a name=\"limits\"></a>\r\n## Word & Character Limiting\r\n\r\n#### Limiting the number of characters in a string:\r\n\r\n~~~php\r\necho Str::limit(\"Lorem ipsum dolor sit amet\", 10);\r\n// Lorem ipsu...\r\n\r\necho Str::limitExact(\"Lorem ipsum dolor sit amet\", 10);\r\n// Lorem i...\r\n\r\n// Limit the number of characters and append a custom ending\r\necho Str::limitExact('Taylor Otwell', 9, '---');\r\n~~~\r\n\r\n#### Limiting the number of words in a string:\r\n\r\n~~~php\r\necho Str::words(\"Lorem ipsum dolor sit amet\", 3);\r\n// Lorem ipsum dolor...\r\n\r\n// Limit the number of words and append a custom ending\r\necho Str::words('This is a sentence.', 3, '---');\r\n~~~\r\n\r\n`wordwrap( $string, $length )`: Adds a space to a string after a given amount of contiguous, non-whitespace characters.\r\n\r\n<a name=\"random\"></a>\r\n## Generating Random Strings\r\n\r\n#### Generating a random string of alpha-numeric characters:\r\n\r\n~~~php\r\necho Str::random(32);\r\n~~~\r\n\r\n#### Generating a random string of alphabetic characters:\r\n\r\n~~~php\r\necho Str::random(32, 'alpha');\r\n~~~\r\n\r\n<a name=\"singular-and-plural\"></a>\r\n## Singular & Plural\r\n\r\n#### Getting the plural form of a word:\r\n\r\n~~~php\r\necho Str::plural('user');\r\n// users\r\n~~~\r\n\r\n#### Getting the singular form of a word:\r\n\r\n~~~php\r\necho Str::singular('users');\r\n// user\r\n~~~\r\n\r\n#### Getting the plural form if specified value is greater than one:\r\n\r\n~~~php\r\necho Str::plural('comment', count($comments));\r\n~~~\r\n\r\n<a name=\"slugs\"></a>\r\n## Slugs\r\n\r\n#### Generating a URL friendly slug:\r\n\r\n~~~php\r\nreturn Str::slug('My First Blog Post!');\r\n// my-first-blog-post\r\n~~~\r\n\r\n#### Generating a URL friendly slug using a given separator:\r\n\r\n~~~php\r\nreturn Str::slug('My First Blog Post!', '_');\r\n// my_first_blog_post\r\n~~~\r\n\r\n<a name=\"case\"></a>\r\n## Case Conversion\r\n\r\n`ascii( $value )`: Convert a string to 7-bit ASCII.\r\n\r\n`classify( $value )`: Convert a string to an underscored, camel-cased class name.\r\n\r\n~~~php\r\n$class = Str::classify('task_name'); // Returns \"Task_Name\"\r\n\r\n$class = Str::classify('taylor otwell') // Returns \"Taylor_Otwell\"\r\n~~~\r\n\r\n`camelCase( $value )`: Convert a value to camel case.\r\n\r\n<a name=\"search\"></a>\r\n## String Searching\r\n\r\n`is( $pattern, $value )`: Determine if a given string matches a given pattern.\r\n\r\n`endsWith( $haystack, $needle )`: Determine if a given string ends with a given needle.\r\n\r\n`startsWith( $haystack, $needle )`: Determine if a string starts with a given needle.\r\n\r\n`contains( $haystack, $needle )`: Determine if a given string contains a given sub-string.","tagline":"Brings back HTML, Form and Str helper classes to Laravel 4!"}